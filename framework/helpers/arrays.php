<?php

    /**
     * Web Operational Kit
     * The neither huge no micro extensible framework
     *
     * @copyright   All rights reserved 2015, Sébastien ALEXANDRE <sebastien@graphidev.fr>
     * @author      Sébastien ALEXANDRE <sebastien@graphidev.fr>
     * @license     BSD <license.txt>
    **/


    /**
     * This file contains all the array helpers functions.
     * @package Helpers
    **/


    /**
     * Order a two-dimensional array by a key
     *
     * @param   array       $array            Array to order
     * @param   string      $index            Key to use for ordering
     * @param   boolean     $ascending        Wether ascending order or not
     * @return  array                         Returns the ordered array
     * @note    In case of non respect of the ordering key in every sub array, an error will be generated by PHP
    **/
    function array_ksort($array, $index, $ascending = false) {
        $ordered = array();
        foreach($array as $key => $item){
            $ordered[$item[$index].$key] = $item;
        }
        ksort($ordered);

        $array = array();
        foreach($ordered as $item){
            $array[]= $item;
        }

        if($ascending)
            $array = array_reverse($array);

        return $array;
    }


    /**
     * Flatten a multi-dimensional associative array.
     *
     * @param  array       $array            Array to flat
     * @param  string      $separator        Items separator
     * @param  string      $prepend        Items prefix
     * @return array                    Returns a flatten array
    **/
    function array_flat($array, $separator = '.', $prepend = '') {
        $output = array();

        foreach ($array as $key => $value) {

            if(is_array($value))
                $output = array_merge($output, array_flat($value, $separator, $prepend.$key.$separator));

            else
                $output[$prepend.$key] = $value;

         }

         return $output;
    }


    /**
     * Set a multi-dimensional associative array value from a string
     *
     * @param   string      $path        Array's keys path
     * @param   mixed       $value        Value to associate to the final key
     * @param   array       $array        Source array that will contains the value
     * @param   string      $path        Path items separator
     * @return  array                    Returns the alterated array
    **/
    function array_set($path, $value, &$array = array(), $separator = '.') {
        $segments = explode($separator, $path);

        foreach($segments as $index){
            if(!isset($array[$index]))
                $array[$index] = null;

            $array = &$array[$index];
        }

        $array = $value;
        return $array;
    }


    /**
     * Get a multi-dimensional associative array value from a string
     *
     * @param   string      $path        Array's keys path
     * @param   array       $array        Array that contains the value
     * @param   string      $default    Default value (not found item)
     * @param   string      $path        Path items separator
     * @return  mixed                   Returns an associated key's value
    **/
    function array_value($path, $array, $default = null, $separator = '.') {
        if(!empty($path)) {

            $keys = explode($separator, $path);
            foreach ($keys as $key) {

                if(is_array($array) && isset($array[$key]))
                    $array = $array[$key];
                else
                    return $default;

            }

        }

        return $array;
    }

    /**
     * Delete a multi-dimensional associative array index
     *
     * @param   string      $path        Array's keys path
     * @param   array       $array        Array that contains the key
     * @param   string      $path        Path items separator
     * @return  boolean                   Returns wether the key existed (and have been removed) or not
    **/
    function array_unset($path, &$array, $separator = '.') {
        $segments = explode($separator, $path);
        $last = count($segments)-1;
        foreach($segments as $i => $index){
            if(!isset($array[$index]))
                return false;

            if($i < $last)
                $array = &$array[$index];
        }

        if(!isset($array[$segments[$last]]))
            return false;

        unset($array[$segments[$last]]);
        return true;
    }

    /**
     * Insensitive version of in_array()
     *
     * @param   string      $needle            String you're looking after
     * @param   array       $haystack        Array to search in
    **/
    function array_imatch($needle, $haystack) {
        return in_array(mb_strtolower($needle), array_map('mb_strtolower', $haystack));
    }


?>
