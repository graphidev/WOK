#!/usr/bin/env php
<?php

	require_once 'core/init.php';

	/**
	 * Prevent non CLI usage
	**/
	if(! (!getenv('SERVER_SOFTWARE') && (PHP_SAPI == 'cli' || (is_numeric(getenv('argc')) && getenv('argc') > 0))) )
	   trigger_error('Non CLI usage prohibited', E_USER_ERROR);


	/**
	 * Output framework version
	 * Use `-v` or `--version` syntax
	**/
	$cmd = getopt('v', array('version'));
	if(isset($cmd['v']) || isset($cmd['version'])) {
		echo WOK_VERSION.PHP_EOL;
		exit;
	}

	// artisan controller:action -l fr_FR --param value
	Router::register('Tools:cleanCache', array(
		'parameters' => array(
			'folder' => '[a-z]+'
		)
	));

	/**
	 * Initialize the entrypoint
	**/
	$app = App::init( new Command($argv) );

	App:run();

	Command::init($argv);

	if(!Command::action())
		trigger_error('Undefined action. Please allow the following syntax: exec controller:action --param value', E_USER_ERROR);

	Console::init();


	/**
     * Start buffering
     * Response will be generated before they will
     * be send. If an error occured, the response
     * will be erased and replaced by an error response.
    **/
    ob_start();

	/**
     * End callback
     * this function will be called at the end of PHP execution
    **/
    register_shutdown_function(function() {

        /**
         * Register errors logs
         * This will change response if an
         * error occured from the beginning
        **/
        if(($error = Console::register()) && !SYSTEM_DEBUG) {

            ob_clean(); // Clean buffer

			/* @TODO output text response */
            Response::view('error', 500)->assign(array(
                //'code' => $e->getCode(),
                'message' => $error['message'],
            ))->cachecache(Response::DISABLE_CACHE, Response::CACHE_PRIVATE, false)
			->render(true);
        }

		echo PHP_EOL;

    });


	/**
     * Set Custom routes and filters
     * Note that XML manifest and in-app PHP manifest
     * can both be used on the same instance.
     * However the XML one will be parsed first
    **/
    if(file_exists(root(PATH_VAR.'/manifest.php')))
    	require_once root(PATH_VAR.'/manifest.php');

    if(file_exists(root(PATH_VAR.'/filters.php')))
        require_once(root(PATH_VAR.'/filters.php'));



	/**
     * Output response according to controller's return
     * Return false if no route have been find
    **/
	$route = Router::match(Command::action(), Command::parameters());

	if(!$route) // Route not found
		$response = Response::content(function() {
			echo 'Controller not found';
			return false;
		});

	if($route instanceof Response) // Rerouted
		$response = $route;

	elseif($route instanceof StdClass) // Route found
		$response = Dispatcher::run($route->controller, $route->parameters);


	// Generate response
	$output = $response->render(false);


	 /**
     * Shutdown if there was at least one error
     * during the response generation
     * This will call the shutdown callback
     * and change the response content
    **/
    if(Console::getLastError())
        exit;


    /**
     * Output response
     * The response may have been replaced
     * by the error manager (Console)
    **/
    ob_end_flush();

	exit($output);
